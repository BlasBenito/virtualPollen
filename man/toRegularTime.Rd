% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toRegularTime.R
\name{toRegularTime}
\alias{toRegularTime}
\title{Reinterpolates aggregated simulations into regular time.}
\usage{
toRegularTime(x, time.column="Time", interpolation.interval, columns.to.interpolate=c("Suitability", "Driver.A", "Pollen"))
}
\arguments{
\item{x}{list, output of \code{\link{aggregateSimulation}}.}

\item{time.column}{character string, default value is "Time".}

\item{interpolation.interval}{integer, in years, time length encompassed by each sample.}

\item{columns.to.interpolate}{character string or character vector, columns of simulation output to be interpolated. Any subset of: "Pollen", "Population.mature", "Population.immature", "Population.viable.seeds", "Suitability", "Biomass.total", "Biomass.mature", "Biomass.immature", "Mortality.mature", "Mortality.immature", "Driver.A", "Driver.B".}
}
\value{
A list of dataframes with the same structure as the input list. Each dataframe has the columns "Time" (now regular), and any column listed in \code{columns.to.interpolate}.
}
\description{
Takes the output of \code{\link{aggregateSimulation}}, and interpolates it into a regular time grid.
}
\details{
The function takes the input list, and on each dataframe it fits a \code{\link{loess}} model of the form \code{y ~ x}, where \code{y} is any column given by \code{columns.to.interpolate} and \code{x} is the column given by the \code{time.column} argument. The model is used to interpolate column \code{y} on a regular time series of intervals equal to \code{interpolation.interval}.
}
\examples{
#generating driver
driver <- simulateDriver(random.seed = 10, time = 1:1000, autocorrelation.length = 200, output.min = 0, output.max = 100, rescale = TRUE)

#preparing parameters
parameters <- parametersDataframe(rows=2)
parameters[1,] <- c("Species 1", 50, 20, 2, 0.2, 0, 100, 1000, 1, 0, 50, 10, 0, 0, 600, 0)
parameters <- fixParametersTypes(x=parameters)

#simulating population dynamics
sim.output <- simulatePopulation(parameters=parameters, driver.A=driver, driver.B=NULL)

#generating accumulation rate
acc.rate <- simulateAccumulationRate(seed=50, time=1:1000, output.min=10, output.max=40, direction=1, plot=TRUE)

#aggregating simulated data
sim.output.aggregated <- aggregateSimulation(simulation.output=sim.output, accumulation.rate=acc.rate, sampling.intervals=3)

#comparing simulations
sim.output.regular <- toRegularTime(x=sim.output.aggregated, time.column="Time", interpolation.interval=20, columns.to.interpolate=c("Driver.A", "Pollen"))

}
\seealso{
\code{\link{simulateAccumulationRate}}, \code{\link{aggregateSimulation}}
}
\author{
Blas M. Benito  <blasbenito@gmail.com>
}
