
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "virtualPollen"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "virtualPollen-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('virtualPollen')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("acfToDf")
> ### * acfToDf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: acfToDf
> ### Title: Computes temporal autocorrelation in a vector, and returns a
> ###   dataframe for easy plotting.
> ### Aliases: acfToDf
> 
> ### ** Examples
> 
> 
> #getting a driver
> data(driverA)
> 
> #computing temporal autocorrelations
> x.df <- acfToDf(
+   x = driverA,
+   lag.max = 1000,
+   length.out = 100
+ )
> str(x.df)
'data.frame':	100 obs. of  4 variables:
 $ lag   : num  0 10 20 30 40 50 60 70 80 90 ...
 $ acf   : num  1 0.963 0.927 0.891 0.855 ...
 $ ci.max: num  0.0277 0.0277 0.0277 0.0277 0.0277 ...
 $ ci.min: num  -0.0277 -0.0277 -0.0277 -0.0277 -0.0277 ...
> 
> #plotting output
> plotAcf(x.df)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("acfToDf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aggregateSimulation")
> ### * aggregateSimulation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aggregateSimulation
> ### Title: Aggregates the output of 'simulatePopulation'.
> ### Aliases: aggregateSimulation
> 
> ### ** Examples
> 
> 
> #getting example data
> data(simulation)
> data(accumulationRate)
> 
> #aggregating first simulation outcome
> sim.output.aggregated <- aggregateSimulation(
+  simulation.output = simulation[1],
+  accumulation.rate = accumulationRate,
+  sampling.intervals = c(2,6))
> 
> #comparing simulations
> par(mfrow = c(3,1))
> #notice the subsetting of the given column of the input list
> plot(sim.output.aggregated[[1,1]]$Time,
+  sim.output.aggregated[[1,1]]$Pollen,
+  type = "l",
+  xlim = c(500, 1000),
+  main = "Annual"
+  )
> plot(sim.output.aggregated[[1,2]]$Time,
+  sim.output.aggregated[[1,2]]$Pollen,
+  type = "l",
+  xlim = c(500, 1000),
+  main = "2cm"
+  )
> plot(sim.output.aggregated[[1,3]]$Time,
+  sim.output.aggregated[[1,3]]$Pollen,
+  type = "l",
+  xlim = c(500, 1000),
+  main = "6cm"
+  )
> 
> #check differences in nrow
> nrow(sim.output.aggregated[[1,1]]) #original data
[1] 5000
> nrow(sim.output.aggregated[[1,2]]) #2cm
[1] 363
> nrow(sim.output.aggregated[[1,3]]) #6cm intervals
[1] 182
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aggregateSimulation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("compareSimulations")
> ### * compareSimulations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compareSimulations
> ### Title: Compares different simulations produced by 'simulatePopulation'.
> ### Aliases: compareSimulations
> 
> ### ** Examples
> 
> 
> #getting example data
> data(simulation)
> 
> #compare taxa 1, 2, and 3.
> compareSimulations(simulation.output = simulation,
+  species = c(1, 2, 3),
+  columns = c("Pollen", "Suitability"),
+  time.zoom = c(1000, 2000)
+ )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compareSimulations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fixParametersTypes")
> ### * fixParametersTypes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fixParametersTypes
> ### Title: Fix data types in a parameters dataframe.
> ### Aliases: fixParametersTypes
> 
> ### ** Examples
> 
> 
> parameters <- parametersDataframe(rows=1)
> parameters[1,] <- c("Species 1", 50, 20, 2, 0.2, 0, 100, 1000, 1, 0, 50, 10, 0, 0, 600, 600)
> parameters <- fixParametersTypes(x=parameters)
Checking taxon Species 1
carrying.capacity for the taxon is too low, increasing it to2000
niche.B.sd was 0, changing it to 1.
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fixParametersTypes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("parametersCheck")
> ### * parametersCheck
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: parametersCheck
> ### Title: Plots main simulation parameters.
> ### Aliases: parametersCheck
> 
> ### ** Examples
> 
> #getting data
> data(parameters)
> data(drivers)
> 
> #plotting parameters
> parametersCheck(
+  parameters = parameters,
+  drivers = drivers
+  )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("parametersCheck", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("parametersDataframe")
> ### * parametersDataframe
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: parametersDataframe
> ### Title: Generates a template dataframe to contain simulation parameters.
> ### Aliases: parametersDataframe
> 
> ### ** Examples
> 
> 
> #generating the template
> parameters <- parametersDataframe(rows=1)
> 
> #filling it with a vector
> parameters[1,] <- c("Species 1", 50, 20, 2, 0.2, 0, 100, 1000, 1, 0, 50, 10, 0, 0, 600, 600)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("parametersDataframe", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotAcf")
> ### * plotAcf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotAcf
> ### Title: Plots results of 'acfToDf'.
> ### Aliases: plotAcf
> 
> ### ** Examples
> 
> 
> #getting a driver
> data(driverA)
> 
> #computing temporal autocorrelations
> x.df <- acfToDf(
+   x = driverA,
+   lag.max = 1000,
+   length.out = 100
+ )
> str(x.df)
'data.frame':	100 obs. of  4 variables:
 $ lag   : num  0 10 20 30 40 50 60 70 80 90 ...
 $ acf   : num  1 0.963 0.927 0.891 0.855 ...
 $ ci.max: num  0.0277 0.0277 0.0277 0.0277 0.0277 ...
 $ ci.min: num  -0.0277 -0.0277 -0.0277 -0.0277 -0.0277 ...
> 
> #plotting output
> plotAcf(x.df)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotAcf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotSimulation")
> ### * plotSimulation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotSimulation
> ### Title: Plots results of 'simulatePopulation'.
> ### Aliases: plotSimulation
> 
> ### ** Examples
> 
> 
> #getting example data
> data(simulation)
> 
> #plot first simulation
> plotSimulation(simulation.output = simulation[[1]])
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotSimulation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rescaleVector")
> ### * rescaleVector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rescaleVector
> ### Title: Rescales a vector within given bounds.
> ### Aliases: rescaleVector
> 
> ### ** Examples
> 
> #generating example data
> x = rnorm(100)
> 
> #as float
> x.float <- rescaleVector(
+   x = x,
+   new.min = 0,
+   new.max = 100,
+   integer = FALSE
+   )
> 
> #as integer
> x.integer <- rescaleVector(
+   x = x,
+   new.min = 0,
+   new.max = 100,
+   integer = TRUE
+   )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rescaleVector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulateAccumulationRate")
> ### * simulateAccumulationRate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulateAccumulationRate
> ### Title: Simulates a virtual sediment accumulation rate.
> ### Aliases: simulateAccumulationRate
> 
> ### ** Examples
> 
> 
> acc.rate <- simulateAccumulationRate(
+  seed = 50,
+  time = 1:1000,
+  output.min = 10,
+  output.max = 40,
+  direction = 1,
+  plot = TRUE
+  )
> 
> str(acc.rate)
'data.frame':	1000 obs. of  3 variables:
 $ time             : int  1 2 3 4 5 6 7 8 9 10 ...
 $ accumulation.rate: num  40 39 39 39 39 39 39 39 39 39 ...
 $ grouping         : num  1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulateAccumulationRate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulateDriver")
> ### * simulateDriver
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulateDriver
> ### Title: Generates a random time series with temporal autocorrelation.
> ### Aliases: simulateDriver
> 
> ### ** Examples
> 
> 
> x <- simulateDriver(
+   random.seed = 30,
+   time = 1:10000,
+   autocorrelation.length = 100,
+   output.min = -10,
+   output.max = 20,
+   rescale = TRUE
+   )
> 
> #plots output
> plot(x, type = "l")
> 
> #checks temporal autocorrelation
> acf(x, lag.max = 300)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulateDriver", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulateDriverS")
> ### * simulateDriverS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulateDriverS
> ### Title: Generates drivers for 'simulatePopulation'.
> ### Aliases: simulateDriverS
> 
> ### ** Examples
> 
> 
> drivers <- simulateDriverS(
+  random.seeds=c(60, 120),
+  time=1:10000,
+  autocorrelation.lengths=c(200, 600),
+  output.min=c(0,0),
+  output.max=c(100, 100),
+  driver.names=c("A", "B"),
+  filename=NULL
+ )
> 
> str(drivers)
'data.frame':	40000 obs. of  4 variables:
 $ time                  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ driver                : chr  "A" "A" "A" "A" ...
 $ autocorrelation.length: num  200 200 200 200 200 200 200 200 200 200 ...
 $ value                 : num  80.6 83.8 80.9 78.9 82.7 ...
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulateDriverS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulatePopulation")
> ### * simulatePopulation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulatePopulation
> ### Title: Simulates population dynamics for virtual species with different
> ###   traits.
> ### Aliases: simulatePopulation
> 
> ### ** Examples
> 
> 
> #getting data
> data(parameters)
> data(driverA)
> 
> #simulating population dynamics
> # of first taxon in parameters
> # for first 500 values of driverA
> sim.output <- simulatePopulation(
+  parameters=parameters[1,],
+  driver.A=driverA[1:500]
+  )
Simulating taxon: S10A50-5_f10

> 
> #checking output
> str(sim.output)
List of 1
 $ S10A50-5_f10:'data.frame':	600 obs. of  14 variables:
  ..$ Time                   : int [1:600] -100 -99 -98 -97 -96 -95 -94 -93 -92 -91 ...
  ..$ Pollen                 : num [1:600] 4807 5018 4060 2280 2079 ...
  ..$ Population.mature      : num [1:600] 49 51 41 23 21 52 54 54 45 44 ...
  ..$ Population.immature    : num [1:600] 33 503 505 351 209 203 352 327 297 234 ...
  ..$ Population.viable.seeds: num [1:600] 480 501 406 227 207 499 525 529 444 431 ...
  ..$ Suitability            : num [1:600] 0.995 0.997 1 1 0.994 ...
  ..$ Biomass.total          : num [1:600] 6218 8308 9989 9988 9968 ...
  ..$ Biomass.mature         : num [1:600] 4830 5031 4060 2280 2091 ...
  ..$ Biomass.immature       : num [1:600] 1389 3277 5929 7708 7876 ...
  ..$ Mortality.mature       : num [1:600] 0 0 10 13 4 20 21 18 18 14 ...
  ..$ Mortality.immature     : num [1:600] 0 0 490 553 367 155 322 526 550 492 ...
  ..$ Driver.A               : num [1:600] NA NA NA NA NA NA NA NA NA NA ...
  ..$ Driver.B               : logi [1:600] NA NA NA NA NA NA ...
  ..$ Period                 : Factor w/ 2 levels "Burn-in","Simulation": 1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulatePopulation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("toRegularTime")
> ### * toRegularTime
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: toRegularTime
> ### Title: Reinterpolates aggregated simulations into regular time.
> ### Aliases: toRegularTime
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D #getting example data
> ##D data(simulation)
> ##D data(accumulationRate)
> ##D 
> ##D #aggregating first simulation outcome
> ##D sim.output.aggregated <- aggregateSimulation(
> ##D  simulation.output = simulation[1],
> ##D  accumulation.rate = accumulationRate,
> ##D  sampling.intervals = c(2,6))
> ##D 
> ##D #to regular time
> ##D sim.output.aggregated <- toRegularTime(
> ##D  x=sim.output.aggregated,
> ##D  time.column ="Time",
> ##D  interpolation.interval = 10,
> ##D  columns.to.interpolate = c("Suitability", "Pollen")
> ##D )
> ##D 
> ##D #comparing simulations
> ##D par(mfrow = c(3,1))
> ##D #notice the subsetting of the given column of the input list
> ##D plot(sim.output.aggregated[[1,1]]$Time,
> ##D     sim.output.aggregated[[1,1]]$Pollen,
> ##D     type = "l",
> ##D     xlim = c(500, 1000),
> ##D     main = "Annual"
> ##D )
> ##D plot(sim.output.aggregated[[1,2]]$Time,
> ##D     sim.output.aggregated[[1,2]]$Pollen,
> ##D     type = "l",
> ##D     xlim = c(500, 1000),
> ##D     main = "2cm"
> ##D )
> ##D plot(sim.output.aggregated[[1,3]]$Time,
> ##D     sim.output.aggregated[[1,3]]$Pollen,
> ##D     type = "l",
> ##D     xlim = c(500, 1000),
> ##D     main = "6cm"
> ##D )
> ##D 
> ##D #check differences in nrow
> ##D nrow(sim.output.aggregated[[1,1]]) #original data
> ##D nrow(sim.output.aggregated[[1,2]]) #2cm
> ##D nrow(sim.output.aggregated[[1,3]]) #6cm intervals
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("toRegularTime", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.642 2.889 7.552 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
